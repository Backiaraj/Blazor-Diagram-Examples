@page "/"

@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Diagram
@using Syncfusion.Blazor.Diagram.Internal
@using Syncfusion.Blazor.Data;
@using Microsoft.Data.SqlClient;
@using System.Data;
@using System.IO;
@using Microsoft.AspNetCore.Hosting;
@using System.Text.Json.Serialization
@inject IHostingEnvironment _env

@*Hidden:Lines*@
<style>

    #diagram {
        display: block;
    }

    .row {
        display: block;
    }

    .image-pattern-style {
        background-color: white;
        background-size: contain;
        background-repeat: no-repeat;
        height: 75px;
        width: calc((100% - 12px) / 2);
        cursor: pointer;
        border: 1px solid #D5D5D5;
        background-position: center;
        float: left;
    }

    .row {
        margin-left: 0px;
        margin-right: 0px;
    }

    .row-header {
        font-size: 13px;
        font-weight: 600;
    }

    .image-pattern-style:hover {
        border-color: gray;
        border-width: 2px;
    }

    .e-checkbox-wrapper .e-label {
        font-size: 12px;
    }

    .e-selected-style {
        border-color: #006CE6;
        border-width: 2px;
    }

    .col-xs-6 {
        padding-left: 0px;
        padding-right: 0px;
    }

    .textboxstyle {
        padding-left: 0px;
        padding-right: 0px;
        float: left;
        width: 110px;
    }

    .sb-property-border {
        border-right: 1px solid #D7D7D7;
    }
</style>
@*End:Hidden*@
<div class="col-lg-9 control-section sb-property-border">
    <div class="content-wrapper">
        <SfDiagramComponent @ref="@Diagram" Height="800px" Width="900px" ConnectorCreating="@ConnectorCreating" NodeCreating="@NodeCreating">
            <DataSourceSettings ID="ID" ParentID="Manager" DataSource="DataSource"> </DataSourceSettings>
                <Layout @bind-Type="type" @bind-HorizontalSpacing="@HorizontalSpacing" @bind-Orientation="@orientation" @bind-VerticalSpacing="@VerticalSpacing" @bind-HorizontalAlignment="@horizontalAlignment" @bind-VerticalAlignment="@verticalAlignment" GetLayoutInfo="GetLayoutInfo">
                    <LayoutMargin @bind-Top="@top" @bind-Bottom="@bottom" @bind-Right="@right" @bind-Left="@left"></LayoutMargin>
                </Layout>             

        </SfDiagramComponent>


    </div>
</div>


@code{
    SfDiagramComponent Diagram;
    public int? HValue { get; set; } = 30;
    public int? VValue { get; set; } = 30;
    static string selecteditem = "image-pattern-style e-selected-style";
    static string unselecteditem = "image-pattern-style";
    double top = 50;
    double bottom = 50;
    double right = 50;
    double left = 50;
    LayoutType type = LayoutType.OrganizationalChart;
    LayoutOrientation orientation = LayoutOrientation.TopToBottom;
    HorizontalAlignment horizontalAlignment = HorizontalAlignment.Auto;
    VerticalAlignment verticalAlignment = VerticalAlignment.Auto;
    int HorizontalSpacing = 30;
    int VerticalSpacing = 30;

    private void ConnectorCreating(IDiagramObject connector)
    {
        (connector as Connector).Type = ConnectorSegmentType.Orthogonal;
        (connector as Connector).TargetDecorator.Shape = DecoratorShape.None;
    }

    private TreeInfo GetLayoutInfo(IDiagramObject obj, TreeInfo options)
    {
        options.EnableSubTree = true;
        options.Orientation = Orientation .Horizontal;
        return options;
    }
    private void NodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        OrganizationalDetails hierarchicalData = node.Data as OrganizationalDetails;
        node.Width = 150;
        node.Height = 50;
        node.Style.Fill = hierarchicalData.Color;
        node.Annotations = new DiagramObjectCollection<ShapeAnnotation>()
        {
            new ShapeAnnotation()
            {
                Content = hierarchicalData.Role,
                Style =new TextStyle(){Color = "white"}
            }
        };
    }
    public List<OrganizationalDetails> DataSource;
    protected override Task OnInitializedAsync()
    {

        string ConnectionStr = $"Data Source=LocalHost;Initial Catalog=Diagram;User ID=sa;Password=sa@123;TrustServerCertificate=True";

        // Here, we formed the SQL query string based on the skip and take count from the DataManagerRequest

        string QueryStr = "SELECT *  FROM dbo.diagram";
        DataSet Data = CreateCommand(QueryStr, ConnectionStr);


        DataSource = Data.Tables[0].AsEnumerable().Select(r => new OrganizationalDetails
            {
                ID = r.Field<string>("ID"),
                Manager = r.Field<string>("Manager"),
                Color = r.Field<string>("Color"),
                Role = r.Field<string>("RoleName"),
            }).ToList();
        return base.OnInitializedAsync();
    }


    public DataSet CreateCommand(string queryString, string connectionString)
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            SqlDataAdapter adapter = new SqlDataAdapter(queryString, connection);
            DataSet dt = new DataSet();
            try
            {
                connection.Open();

                // Using sqlDataAdapter, we process the query string and fill the data into the dataset

                adapter.Fill(dt);
            }
            catch (SqlException se)
            {
                Console.WriteLine(se.ToString());
            }
            finally
            {
                connection.Close();
            }
            return dt;
        }
    }
    public class OrganizationalDetails
    {
        public string ID { get; set; }
        public string Role { get; set; }
        public string Manager { get; set; }
        public string Color { get; set; }

    }
   
}


